{
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2013 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "postmaster\n==========\n\nSend and receive `postMessage` commands using promises to handle the results.\n",
      "mode": "100644",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "content": "###\n\nPostmaster wraps the `postMessage` API with promises.\n\n###\n\ndefaultReceiver = self\nackTimeout = 1000\n\nmodule.exports = Postmaster = (self={}) ->\n  send = (data) ->\n    target = self.remoteTarget()\n    if self.token\n      data.token = self.token\n\n    if !target\n      throw new Error \"No remote target\"\n    else if !Worker? or target instanceof Worker\n      target.postMessage data\n    else\n      target.postMessage data, \"*\"\n\n    return\n\n  dominant = Postmaster.dominant()\n  self.remoteTarget ?= -> dominant\n  self.receiver ?= -> defaultReceiver\n  self.ackTimeout ?= -> ackTimeout\n  self.delegate ?= self\n  self.token ?= Math.random()\n\n  listener = (event) ->\n    {data, source} = event\n    target = self.remoteTarget()\n\n    # Only listening to messages from `opener`\n    # event.source becomes undefined during the `onunload` event\n    # We can track a token and match to allow the final message in this case\n    if source is target or (source is undefined and data.token is self.token)\n      {type, method, params, id} = data\n\n      switch type\n        when \"ack\"\n          pendingResponses[id]?.ack = true\n        when \"response\"\n          pendingResponses[id].resolve data.result\n        when \"error\"\n          pendingResponses[id].reject data.error\n        when \"message\"\n          Promise.resolve()\n          .then ->\n            if source\n              send\n                type: \"ack\"\n                id: id\n\n            if typeof self.delegate[method] is \"function\"\n              self.delegate[method](params...)\n            else\n              throw new Error \"`#{method}` is not a function\"\n          .then (result) ->\n            if source\n              send\n                type: \"response\"\n                id: id\n                result: result\n          .catch (error) ->\n            if typeof error is \"string\"\n              message = error\n            else\n              message = error.message\n\n            if source\n              send\n                type: \"error\"\n                id: id\n                error:\n                  message: message\n                  stack: error.stack\n\n  self.receiver().addEventListener \"message\", listener\n\n  self.dispose = ->\n    self.receiver().removeEventListener \"message\", listener\n\n  pendingResponses = {}\n  remoteId = 0\n\n  clear = (id) ->\n    clearTimeout pendingResponses[id].timeout\n    delete pendingResponses[id]\n\n  self.invokeRemote = (method, params...) ->\n    new Promise (resolve, reject) ->\n      id = remoteId++\n\n      try\n        send\n          type: \"message\"\n          method: method\n          params: params\n          id: id\n      catch e\n        reject(e)\n        return\n\n      ackWait = self.ackTimeout()\n      timeout = setTimeout ->\n        pendingResponse = pendingResponses[id]\n        if pendingResponse and !pendingResponse.ack\n          clear(id)\n          reject new Error \"No ack received within #{ackWait}\"\n      , ackWait\n\n      pendingResponses[id] =\n        timeout: timeout\n        resolve: (result) ->\n          clear(id)\n          resolve(result)\n        reject: (error) ->\n          clear(id)\n          reject(error)\n\n  return self\n\nPostmaster.dominant = ->\n  if window? # iframe or child window context\n    opener or ((parent != window) and parent) or undefined\n  else # Web Worker Context\n    self\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "version: \"0.6.1-pre.2\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "test/postmaster.coffee": {
      "path": "test/postmaster.coffee",
      "content": "Postmaster = require \"../main\"\n\nscriptContent = ->\n  fn = ->\n    pm = Postmaster\n      delegate:\n        echo: (value) ->\n          return value\n        throws: ->\n          throw new Error(\"This always throws\")\n        promiseFail: ->\n          Promise.reject new Error \"This is a failed promise\"\n        invokeRemote: ->\n          pm.invokeRemote(arguments...)\n\n  \"\"\"\n    (function() {\n    var module = {};\n    (function() {\n    #{PACKAGE.distribution.main.content};\n    })();\n    var Postmaster = module.exports;\n    (#{fn.toString()})();\n    })();\n  \"\"\"\n\nsrcUrl = -> \n  URL.createObjectURL new Blob [\"\"\"\n    <html>\n    <body>\n      <script>#{scriptContent()}<\\/script>\n    </body>\n    </html>\n  \"\"\"], \n    type: \"text/html; charset=utf-8\"\n\ninitWindow = (targetWindow) ->\n  targetWindow.document.write \"<script>#{scriptContent()}<\\/script>\"\n\ndescribe \"Postmaster\", ->\n  it \"should work with openened windows\", (done) ->\n    childWindow = open(srcUrl(), null, \"width=200,height=200\")\n\n    postmaster = Postmaster\n      remoteTarget: -> childWindow\n\n    childWindow.addEventListener \"load\", ->\n      postmaster.invokeRemote \"echo\", 5\n      .then (result) ->\n        assert.equal result, 5\n      .then ->\n        done()\n      , (error) ->\n        done(error)\n      .then ->\n        childWindow.close()\n\n    return\n\n  it \"should work with iframes\", (done) ->\n    iframe = document.createElement('iframe')\n    iframe.src = srcUrl()\n    document.body.appendChild(iframe)\n\n    postmaster = Postmaster\n      remoteTarget: ->\n        iframe.contentWindow\n\n    iframe.onload = ->\n      postmaster.invokeRemote \"echo\", 17\n      .then (result) ->\n        assert.equal result, 17\n      .then ->\n        done()\n      , (error) ->\n        done(error)\n      .then ->\n        iframe.remove()\n\n    return\n\n  it \"should handle the remote call throwing errors\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"throws\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n    return\n\n  it \"should throwing a useful error when the remote doesn't define the function\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"someUndefinedFunction\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n    return\n\n  it \"should handle the remote call returning failed promises\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"promiseFail\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n    return\n\n  it \"should be able to go around the world\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.yolo = (txt) ->\n      \"heyy #{txt}\"\n    postmaster.invokeRemote \"invokeRemote\", \"yolo\", \"cool\"\n    .then (result) ->\n      assert.equal result, \"heyy cool\"\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      iframe.remove()\n\n    return\n\n  it \"should work with web workers\"\n  (done) ->\n    blob = new Blob [scriptContent()], type: \"application/javascript\"\n    jsUrl = URL.createObjectURL(blob)\n\n    worker = new Worker(jsUrl)\n\n    base =\n      remoteTarget: -> worker\n      receiver: -> worker\n\n    postmaster = Postmaster(base)\n    postmaster.invokeRemote \"echo\", 17\n    .then (result) ->\n      assert.equal result, 17\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      worker.terminate()\n\n    return\n\n  it \"should fail quickly when contacting a window that doesn't support Postmaster\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 5\n    .catch (e) ->\n      if e.message.match /no ack/i\n        done()\n      else\n        done(1)\n    .then ->\n      iframe.remove()\n\n    return\n\n  it \"should return a rejected promise when unable to send to the target\", (done) ->\n    postmaster = Postmaster\n      remoteTarget: -> null\n\n    postmaster.invokeRemote \"yo\"\n    .catch (e) ->\n      assert.equal e.message, \"No remote target\"\n      done()\n    .catch done\n\n    return\n",
      "mode": "100644",
      "type": "blob"
    }
  },
  "distribution": {
    "main": {
      "path": "main",
      "content": "\n/*\n\nPostmaster wraps the `postMessage` API with promises.\n */\n\n(function() {\n  var Postmaster, ackTimeout, defaultReceiver,\n    __slice = [].slice;\n\n  defaultReceiver = self;\n\n  ackTimeout = 1000;\n\n  module.exports = Postmaster = function(self) {\n    var clear, dominant, listener, pendingResponses, remoteId, send;\n    if (self == null) {\n      self = {};\n    }\n    send = function(data) {\n      var target;\n      target = self.remoteTarget();\n      if (self.token) {\n        data.token = self.token;\n      }\n      if (!target) {\n        throw new Error(\"No remote target\");\n      } else if ((typeof Worker === \"undefined\" || Worker === null) || target instanceof Worker) {\n        target.postMessage(data);\n      } else {\n        target.postMessage(data, \"*\");\n      }\n    };\n    dominant = Postmaster.dominant();\n    if (self.remoteTarget == null) {\n      self.remoteTarget = function() {\n        return dominant;\n      };\n    }\n    if (self.receiver == null) {\n      self.receiver = function() {\n        return defaultReceiver;\n      };\n    }\n    if (self.ackTimeout == null) {\n      self.ackTimeout = function() {\n        return ackTimeout;\n      };\n    }\n    if (self.delegate == null) {\n      self.delegate = self;\n    }\n    if (self.token == null) {\n      self.token = Math.random();\n    }\n    listener = function(event) {\n      var data, id, method, params, source, target, type, _ref;\n      data = event.data, source = event.source;\n      target = self.remoteTarget();\n      if (source === target || (source === void 0 && data.token === self.token)) {\n        type = data.type, method = data.method, params = data.params, id = data.id;\n        switch (type) {\n          case \"ack\":\n            return (_ref = pendingResponses[id]) != null ? _ref.ack = true : void 0;\n          case \"response\":\n            return pendingResponses[id].resolve(data.result);\n          case \"error\":\n            return pendingResponses[id].reject(data.error);\n          case \"message\":\n            return Promise.resolve().then(function() {\n              var _ref1;\n              if (source) {\n                send({\n                  type: \"ack\",\n                  id: id\n                });\n              }\n              if (typeof self.delegate[method] === \"function\") {\n                return (_ref1 = self.delegate)[method].apply(_ref1, params);\n              } else {\n                throw new Error(\"`\" + method + \"` is not a function\");\n              }\n            }).then(function(result) {\n              if (source) {\n                return send({\n                  type: \"response\",\n                  id: id,\n                  result: result\n                });\n              }\n            })[\"catch\"](function(error) {\n              var message;\n              if (typeof error === \"string\") {\n                message = error;\n              } else {\n                message = error.message;\n              }\n              if (source) {\n                return send({\n                  type: \"error\",\n                  id: id,\n                  error: {\n                    message: message,\n                    stack: error.stack\n                  }\n                });\n              }\n            });\n        }\n      }\n    };\n    self.receiver().addEventListener(\"message\", listener);\n    self.dispose = function() {\n      return self.receiver().removeEventListener(\"message\", listener);\n    };\n    pendingResponses = {};\n    remoteId = 0;\n    clear = function(id) {\n      clearTimeout(pendingResponses[id].timeout);\n      return delete pendingResponses[id];\n    };\n    self.invokeRemote = function() {\n      var method, params;\n      method = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      return new Promise(function(resolve, reject) {\n        var ackWait, e, id, timeout;\n        id = remoteId++;\n        try {\n          send({\n            type: \"message\",\n            method: method,\n            params: params,\n            id: id\n          });\n        } catch (_error) {\n          e = _error;\n          reject(e);\n          return;\n        }\n        ackWait = self.ackTimeout();\n        timeout = setTimeout(function() {\n          var pendingResponse;\n          pendingResponse = pendingResponses[id];\n          if (pendingResponse && !pendingResponse.ack) {\n            clear(id);\n            return reject(new Error(\"No ack received within \" + ackWait));\n          }\n        }, ackWait);\n        return pendingResponses[id] = {\n          timeout: timeout,\n          resolve: function(result) {\n            clear(id);\n            return resolve(result);\n          },\n          reject: function(error) {\n            clear(id);\n            return reject(error);\n          }\n        };\n      });\n    };\n    return self;\n  };\n\n  Postmaster.dominant = function() {\n    if (typeof window !== \"undefined\" && window !== null) {\n      return opener || ((parent !== window) && parent) || void 0;\n    } else {\n      return self;\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"version\":\"0.6.1-pre.2\"};",
      "type": "blob"
    },
    "test/postmaster": {
      "path": "test/postmaster",
      "content": "(function() {\n  var Postmaster, initWindow, scriptContent, srcUrl;\n\n  Postmaster = require(\"../main\");\n\n  scriptContent = function() {\n    var fn;\n    fn = function() {\n      var pm;\n      return pm = Postmaster({\n        delegate: {\n          echo: function(value) {\n            return value;\n          },\n          throws: function() {\n            throw new Error(\"This always throws\");\n          },\n          promiseFail: function() {\n            return Promise.reject(new Error(\"This is a failed promise\"));\n          },\n          invokeRemote: function() {\n            return pm.invokeRemote.apply(pm, arguments);\n          }\n        }\n      });\n    };\n    return \"(function() {\\nvar module = {};\\n(function() {\\n\" + PACKAGE.distribution.main.content + \";\\n})();\\nvar Postmaster = module.exports;\\n(\" + (fn.toString()) + \")();\\n})();\";\n  };\n\n  srcUrl = function() {\n    return URL.createObjectURL(new Blob([\"<html>\\n<body>\\n  <script>\" + (scriptContent()) + \"<\\/script>\\n</body>\\n</html>\"], {\n      type: \"text/html; charset=utf-8\"\n    }));\n  };\n\n  initWindow = function(targetWindow) {\n    return targetWindow.document.write(\"<script>\" + (scriptContent()) + \"<\\/script>\");\n  };\n\n  describe(\"Postmaster\", function() {\n    it(\"should work with openened windows\", function(done) {\n      var childWindow, postmaster;\n      childWindow = open(srcUrl(), null, \"width=200,height=200\");\n      postmaster = Postmaster({\n        remoteTarget: function() {\n          return childWindow;\n        }\n      });\n      childWindow.addEventListener(\"load\", function() {\n        return postmaster.invokeRemote(\"echo\", 5).then(function(result) {\n          return assert.equal(result, 5);\n        }).then(function() {\n          return done();\n        }, function(error) {\n          return done(error);\n        }).then(function() {\n          return childWindow.close();\n        });\n      });\n    });\n    it(\"should work with iframes\", function(done) {\n      var iframe, postmaster;\n      iframe = document.createElement('iframe');\n      iframe.src = srcUrl();\n      document.body.appendChild(iframe);\n      postmaster = Postmaster({\n        remoteTarget: function() {\n          return iframe.contentWindow;\n        }\n      });\n      iframe.onload = function() {\n        return postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n          return assert.equal(result, 17);\n        }).then(function() {\n          return done();\n        }, function(error) {\n          return done(error);\n        }).then(function() {\n          return iframe.remove();\n        });\n      };\n    });\n    it(\"should handle the remote call throwing errors\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.invokeRemote(\"throws\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should throwing a useful error when the remote doesn't define the function\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.invokeRemote(\"someUndefinedFunction\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should handle the remote call returning failed promises\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.invokeRemote(\"promiseFail\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should be able to go around the world\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.yolo = function(txt) {\n        return \"heyy \" + txt;\n      };\n      postmaster.invokeRemote(\"invokeRemote\", \"yolo\", \"cool\").then(function(result) {\n        return assert.equal(result, \"heyy cool\");\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should work with web workers\");\n    (function(done) {\n      var base, blob, jsUrl, postmaster, worker;\n      blob = new Blob([scriptContent()], {\n        type: \"application/javascript\"\n      });\n      jsUrl = URL.createObjectURL(blob);\n      worker = new Worker(jsUrl);\n      base = {\n        remoteTarget: function() {\n          return worker;\n        },\n        receiver: function() {\n          return worker;\n        }\n      };\n      postmaster = Postmaster(base);\n      postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n        return assert.equal(result, 17);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return worker.terminate();\n      });\n    });\n    it(\"should fail quickly when contacting a window that doesn't support Postmaster\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.invokeRemote(\"echo\", 5)[\"catch\"](function(e) {\n        if (e.message.match(/no ack/i)) {\n          return done();\n        } else {\n          return done(1);\n        }\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    return it(\"should return a rejected promise when unable to send to the target\", function(done) {\n      var postmaster;\n      postmaster = Postmaster({\n        remoteTarget: function() {\n          return null;\n        }\n      });\n      postmaster.invokeRemote(\"yo\")[\"catch\"](function(e) {\n        assert.equal(e.message, \"No remote target\");\n        return done();\n      })[\"catch\"](done);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "https://danielx.net/editor/"
  },
  "config": {
    "version": "0.6.1-pre.2"
  },
  "version": "0.6.1-pre.2",
  "entryPoint": "main",
  "repository": {
    "branch": "master",
    "default_branch": "master",
    "full_name": "distri/postmaster",
    "homepage": null,
    "description": "Send and receive postMessage commands.",
    "html_url": "https://github.com/distri/postmaster",
    "url": "https://api.github.com/repos/distri/postmaster",
    "publishBranch": "gh-pages"
  },
  "dependencies": {}
}